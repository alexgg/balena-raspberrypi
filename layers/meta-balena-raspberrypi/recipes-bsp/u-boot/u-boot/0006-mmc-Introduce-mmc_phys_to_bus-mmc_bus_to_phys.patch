From 4cb88c1b2da4043432920b43a140f1902e85e959 Mon Sep 17 00:00:00 2001
From: Alexandru Costache <alexandru@balena.io>
Date: Tue, 24 Nov 2020 09:23:13 +0100
Subject: [PATCH 6/6] mmc: Introduce mmc_phys_to_bus()/mmc_bus_to_phys()

This will allow us to use DM variants of phys_to_bus()/bus_to_phys()
when relevant.

Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
---
 drivers/mmc/sdhci.c |  7 ++++---
 include/mmc.h       | 11 ++++++++++-
 2 files changed, 14 insertions(+), 4 deletions(-)

diff --git a/drivers/mmc/sdhci.c b/drivers/mmc/sdhci.c
index 7673219fb3..68366bae82 100644
--- a/drivers/mmc/sdhci.c
+++ b/drivers/mmc/sdhci.c
@@ -19,7 +19,6 @@
 #include <linux/bitops.h>
 #include <linux/delay.h>
 #include <linux/dma-mapping.h>
-#include <phys2bus.h>
 
 static void sdhci_reset(struct sdhci_host *host, u8 mask)
 {
@@ -154,7 +153,8 @@ static void sdhci_prepare_dma(struct sdhci_host *host, struct mmc_data *data,
 					  mmc_get_dma_dir(data));
 
 	if (host->flags & USE_SDMA) {
-		sdhci_writel(host, phys_to_bus((ulong)host->start_addr),
+		sdhci_writel(host,
+			     mmc_phys_to_bus(host->mmc, (ulong)host->start_addr),
 				SDHCI_DMA_ADDRESS);
 	} else if (host->flags & (USE_ADMA | USE_ADMA64)) {
 		sdhci_prepare_adma_table(host, data);
@@ -209,7 +209,8 @@ static int sdhci_transfer_data(struct sdhci_host *host, struct mmc_data *data)
 				start_addr &=
 				~(SDHCI_DEFAULT_BOUNDARY_SIZE - 1);
 				start_addr += SDHCI_DEFAULT_BOUNDARY_SIZE;
-				sdhci_writel(host, phys_to_bus((ulong)start_addr),
+				sdhci_writel(host,
+					     mmc_phys_to_bus(host->mmc, (ulong)start_addr),
 					     SDHCI_DMA_ADDRESS);
 			}
 		}
diff --git a/include/mmc.h b/include/mmc.h
index 82562193cc..18470f40c5 100644
--- a/include/mmc.h
+++ b/include/mmc.h
@@ -15,7 +15,7 @@
 #include <linux/compiler.h>
 #include <linux/dma-direction.h>
 #include <part.h>
-
+#include <phys2bus.h>
 struct bd_info;
 
 #if CONFIG_IS_ENABLED(MMC_HS200_SUPPORT)
@@ -938,4 +938,13 @@ static inline enum dma_data_direction mmc_get_dma_dir(struct mmc_data *data)
 	return data->flags & MMC_DATA_WRITE ? DMA_TO_DEVICE : DMA_FROM_DEVICE;
 }
 
+static inline dma_addr_t mmc_phys_to_bus(struct mmc *mmc, phys_addr_t addr)
+{
+#if CONFIG_IS_ENABLED(DM_MMC)
+	return dev_phys_to_bus(mmc->dev, addr);
+#else
+	return phys_to_bus(addr);
+#endif
+}
+
 #endif /* _MMC_H_ */
-- 
2.17.1

